float4x4 World;
float4x4 View;
float4x4 Projection;
float4x4 WorldInverseTranspose;

float3 CameraPosition;
float3 LightPosition;
float4 DiffuseColor;
float4 SpecularColor; 
float4 AmbientColor;
float BumpConstant = 1;
float LightRange = 1;

float2 TextureTiling = float2(1,1);

texture ModelTexture;
texture NormalMap;

sampler textureSampler = sampler_state {
    Texture = <ModelTexture>;
	MinFilter = ANISOTROPIC;
	MagFilter = LINEAR;
	MipFilter = LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
	MaxAnisotropy = 8;
	MipMapLodBias = -0.5;
};

sampler bumpSampler = sampler_state {
    Texture = <NormalMap>;
	MinFilter = ANISOTROPIC;
	MagFilter = LINEAR;
	MipFilter = LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
	MaxAnisotropy = 8;
	MipMapLodBias = -0.5;
};

struct VertexShaderInput
{
    float4 Position : POSITION0;
    float3 Normal : NORMAL0;
    float3 Tangent : TANGENT0;
    float3 Binormal : BINORMAL0;
    float2 TextureCoordinate : TEXCOORD0;
};

struct VertexShaderOutput
{
    float4 Position : POSITION0;
    float2 TextureCoordinate : TEXCOORD0;
    float3 Normal : TEXCOORD1;
    float3 Tangent : TEXCOORD2;
    float3 Binormal : TEXCOORD3;
	float3 WorldPos : TEXCOORD4;
};

VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
    VertexShaderOutput output;

    float4 worldPosition = mul(input.Position, World);
    float4 viewPosition = mul(worldPosition, View);
    output.Position = mul(viewPosition, Projection);

    output.Normal = normalize(mul(input.Normal, (float3x3)World));
    output.Tangent = normalize(mul(input.Tangent, (float3x3)World));
    output.Binormal = normalize(mul(input.Binormal, (float3x3)World));

	output.WorldPos = (float3)worldPosition;

    output.TextureCoordinate = (input.TextureCoordinate * TextureTiling);
    return output;
}

float4 PixelShaderFunctionBump(VertexShaderOutput input) : COLOR0
{
	float3 bump = BumpConstant * (tex2D(bumpSampler, input.TextureCoordinate) - (0.5, 0.5, 0.5));
    float3 bumpNormal = input.Normal + (bump.x * input.Tangent + bump.y * input.Binormal);
    bumpNormal = normalize(bumpNormal);

	float4 texel = tex2D(textureSampler, input.TextureCoordinate);
	float4 returnTemp;

	float3 lightPos = LightPosition;
	float3 lightVert = normalize(lightPos - input.WorldPos);
	float3 eyeVec = -input.WorldPos;
	float3 halfVec = normalize(lightVert + bumpNormal);

	float temp = max(dot(bumpNormal, halfVec), 0.0);
	float ks = pow(temp, 0.5);
	float kd = dot(lightVert, bumpNormal);
	float ka = 0.2;

	returnTemp = texel * saturate(kd * DiffuseColor + ka * AmbientColor + ks * SpecularColor);

	float3 disFromLight = input.WorldPos - lightPos;
	float dist = length(disFromLight);
	dist = 1.0 / dist;
	returnTemp *= (dist*LightRange);

	returnTemp.a = texel.a;
	return returnTemp;
}

float4 PixelShaderFunction(VertexShaderOutput input) : COLOR0
{
	float4 texel = tex2D(textureSampler, input.TextureCoordinate);
	float4 returnTemp;

	float3 lightPos = LightPosition;
	float3 lightVert = normalize(lightPos - input.WorldPos);
	float3 eyeVec = -input.WorldPos;
	float3 halfVec = normalize(lightVert + input.Normal);

	float temp = max(dot(input.Normal, halfVec), 0.0);
	float ks = pow(temp, 0.5);
	float kd = dot(lightVert, input.Normal);
	float ka = 0.2;

	returnTemp = texel * saturate(kd * DiffuseColor + ka * AmbientColor + ks * SpecularColor);

	float3 disFromLight = input.WorldPos - lightPos;
	float dist = length(disFromLight);
	dist = 1.0 / dist;
	returnTemp *= min((dist*LightRange), 1.0);

	returnTemp.a = texel.a;
	return returnTemp;
}

technique BumpMap
{
    pass p0
    {
        VertexShader = compile vs_2_0 VertexShaderFunction();
        PixelShader = compile ps_2_0 PixelShaderFunctionBump();
    }
}

technique NoBump
{
	pass p0
	{
		VertexShader = compile vs_2_0 VertexShaderFunction();
        PixelShader = compile ps_2_0 PixelShaderFunction();
	}
}